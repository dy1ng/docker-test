<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2021.1/project-config.xsd">
  <name>Update Software Info via PR</name>
  <description />
  <settings>
    <disabled-settings>
      <setting-ref ref="RUNNER_1" />
      <setting-ref ref="RUNNER_18" />
      <setting-ref ref="RUNNER_19" />
    </disabled-settings>
    <parameters>
      <param name="github_token" value="credentialsJSON:c7d9a019-4a0e-4062-8f4c-467c55d64f54" spec="password display='hidden'" />
      <param name="hiddenToken" value="credentialsJSON:64b6255c-89a5-4f74-add0-402ed09ee64b" spec="password display='hidden' readOnly='true'" />
      <param name="teamcity.cloud.documentation.branch.name.prefix" value="dev-patch-" />
      <param name="teamcity.cloud.documentation.fork_name" value="dy1ng/teamcity-documentation" />
      <param name="teamcity.cloud.documentation.git.user.email" value="mikhail.efremov@jetbrains.com" />
      <param name="teamcity.cloud.documentation.git.user.name" value="Mikhail Efremov" />
      <param name="teamcity.cloud.documentation.login" value="dy1ng" />
      <param name="teamcity.cloud.documentation.repo_name" value="dy1ng/teamcity-documentation" />
      <param name="teamcity.cloud.documentation.token" value="%github_token%" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_1" name="Checkout into a new branch and create a PR" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/bin/bash

pr_body_msg="PR created by %teamcity.serverUrl%/buildConfiguration/%system.teamcity.buildType.id%/%teamcity.build.id%"
commit_msg="update agents' preinstalled software list"

echo "###### Check if the script runs is in a git repository"
if [ -d .git ]
then
    echo "######### It is. Proceeding."
else
    echo "######### It is not. Something is wrong. Probably checkout rules. Exiting"
    exit 1
fi
echo "######"

echo "###### Set username and email for this repository"
git config --replace-all user.name "%teamcity.cloud.documentation.git.user.name%" || exit 1
git config --replace-all user.email "%teamcity.cloud.documentation.git.user.email%" || exit 1
echo "######"

echo "###### Check remotes"
remotes=$(git remote -v | grep "https://github.com/%teamcity.cloud.documentation.repo_name%.git" | wc -l)
if [[ $remotes -eq 0 ]] 
then
    echo "######### Add upstream remote"
    git remote add upstream https://github.com/%teamcity.cloud.documentation.repo_name%.git || exit 1
    echo "######### Current remotes list:"
    git remote -v || exit 1
fi
echo "######"

echo "###### Fetch, checkout a new temp branch from upstream's HEAD branch."
repo_head=$(git remote show upstream | awk '/HEAD branch/ {print $NF}')

git fetch upstream $repo_head || exit 1
git checkout -b %teamcity.cloud.documentation.branch.name.prefix%%teamcity.build.id% upstream/$repo_head || exit 1
echo "######"

header_ubuntu=$(cat << EOM
[//]: # (title: Preinstalled Software on TeamCity Cloud Ubuntu Agents)
[//]: # (auxiliary-id: Preinstalled Software on TeamCity Cloud Ubuntu Agents)

<chunk id="ubuntu-jb-agents">
EOM
)
header_windows=$(cat << EOM
[//]: # (title: Preinstalled Software on TeamCity Cloud Windows Agents)
[//]: # (auxiliary-id: Preinstalled Software on TeamCity Cloud Windows Agents)

<chunk id="windows-jb-agents">
EOM
)
footer=$(cat << EOM
</chunk> 
EOM
)
body_ubuntu=$(cat software.report.md)
body_windows=$(cat software.report.md)

echo "###### Write software reports files"
cat > topics/preinstalled-software-on-teamcity-cloud-ubuntu-agents.md << EOM
$header_ubuntu

$body_ubuntu

$footer
EOM
cat > topics/preinstalled-software-on-teamcity-cloud-windows-agents.md << EOM
$header_windows

$body_windows

$footer
EOM
echo "######"

echo "###### Git add, commit, push temp branch to origin"
git add topics/preinstalled-software-on-teamcity-cloud-ubuntu-agents.md || exit 1
git add topics/preinstalled-software-on-teamcity-cloud-windows-agents.md || exit 1
git commit -m "$commit_msg" || echo "######### There is nothing to commit, exiting..." && echo "##teamcity[buildStatus status='SUCCESS' text='Update skipped. No new data to add.']" && exit 0
git push https://%teamcity.cloud.documentation.login%:%teamcity.cloud.documentation.token%@github.com/%teamcity.cloud.documentation.fork_name% %teamcity.cloud.documentation.branch.name.prefix%%teamcity.build.id% || exit 1
echo "######"

json="{\"head\":\"%teamcity.cloud.documentation.login%:%teamcity.cloud.documentation.branch.name.prefix%%teamcity.build.id%\", \"base\":\"$repo_head\", \"body\":\"${pr_body_msg}\", \"title\":\"Update preinstalled software list for TCC agents\"}"
echo "$json"
echo "###### Create PR in documentation repo form temp branch"
curl --user "%teamcity.cloud.documentation.login%:%teamcity.cloud.documentation.token%" -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/%teamcity.cloud.documentation.repo_name%/pulls -d "$json"
echo "######"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_2" name="Generate requirements.txt" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#echo "PyGithub==1.55" > requirements.txt
echo "$(find $(pwd)/dist -type f -name '*.whl')" > requirements.txt]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_3" name="Cleanup old PRs and patch branches" type="python-runner">
        <parameters>
          <param name="command" value="script" />
          <param name="coverageArgs" value="--omit=*lib*" />
          <param name="envTool" value="venv" />
          <param name="installToolPackage" value="true" />
          <param name="isCoverageEnabled" value="false" />
          <param name="isTestReportingEnabled" value="true" />
          <param name="poetryExecutable" value="poetry" />
          <param name="pythonVersion" value="python3" />
          <param name="scriptContent"><![CDATA[from github import Github, UnknownObjectException


def delete_branch(branch_name, rep):
    try:
        ref = rep.get_git_ref(f"heads/{branch_name}")
        ref.delete()
    except UnknownObjectException:
        print('No such branch', branch_name)


if __name__ == '__main__':
    pr_list = []
    branch_list = {}
    g = Github("%teamcity.cloud.documentation.token%")
    docs_repo = g.get_repo("%teamcity.cloud.documentation.repo_name%")
    all_open_prs = docs_repo.get_pulls(state='open')
    # Filter PRs by login and name of head branches
    for pr in all_open_prs:
        if pr.user.login == g.get_user().login and '%teamcity.cloud.documentation.branch.name.prefix%' in pr.head.ref:
            pr_list.append(pr)
    # Sort the list with PRs by create date and pop the most recent item
    pr_list.sort(key=lambda x: x.created_at, reverse=True)
    if len(pr_list) > 0:
        pr_list.pop(0)
    else:
        print("No PRs found. Exiting.")
        exit(0)
    for pr in pr_list:
        print("Closing the following PR as obsolete:")
        print(f"\tTitle: '{pr.title}'; URL: '{pr.html_url}'; Created at: '{pr.created_at}'")
        pr.create_issue_comment("Closing this PR as obsolete, there is a more recent one")
        pr.edit(state='closed')
        # Store to-be-deleted branches that were used has head in PRs we just closed
        branch_list[pr.head.repo] = pr.head.ref
    for repo, branch in branch_list.items():
        print(f"Removing branch '{branch}' in repository '{repo.full_name}'")
        delete_branch(branch, repo)]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="virtualenvEnvName" value=".venv" />
          <param name="virtualenvFile" value="requirements.txt" />
          <param name="virtualenvPipArgs" value="--no-index --find-links wheelhouse/ --upgrade pip" />
        </parameters>
      </runner>
      <runner id="RUNNER_18" name="Make build successful" type="simpleRunner">
        <parameters>
          <param name="script.content" value="echo &quot;##teamcity[buildStatus status='SUCCESS']&quot;" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_19" name="Some step after update" type="simpleRunner">
        <parameters>
          <param name="script.content" value="echo &quot;I'm the last step of the build!&quot;" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="TestProject_HttpsGithubComDy1ngTeamcityDocumentation" />
    </vcs-settings>
    <requirements />
    <build-triggers />
    <artifact-dependencies>
      <dependency id="ARTIFACT_DEPENDENCY_7" sourceBuildTypeId="PyGitHub_BuildWheel" cleanDestination="false">
        <revisionRule name="lastPinned" revision="latest.lastPinned" branch="+:*" />
        <artifact sourcePath="+:*.whl=&gt;dist/&#xD;&#xA;+:wheelhouse/*.whl=&gt;wheelhouse/" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_1" sourceBuildTypeId="TestProject_DownloadSoftwareReport" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" />
        <artifact sourcePath="+:software.report.md" />
      </dependency>
    </artifact-dependencies>
    <cleanup />
  </settings>
</build-type>

